dependencies {
    testCompile 'org.osgi:org.osgi.core'
    testCompile 'org.osgi:osgi.cmpn'
    testCompile 'org.ops4j.pax.exam:pax-exam-junit4'
    testCompile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.javax-inject'
    testCompile 'ch.sourcepond.testing:bundle-test-support:0.1.12'
    testRuntime project(':metatype-builder-testbundle')
    testRuntime project(':metatype-builder-lib')
    testRuntime 'org.apache.felix:org.apache.felix.metatype'
    testRuntime 'org.apache.felix:org.apache.felix.configadmin'
    testRuntime 'org.ops4j.pax.exam:pax-exam-container-native'
    testRuntime 'org.ops4j.pax.exam:pax-exam-link-mvn'
    testRuntime 'org.ops4j.pax.url:pax-url-aether'
    testRuntime 'org.apache.felix:org.apache.felix.framework'
}

task generateDependsFile {
    // This is useful for the org.ops4j.pax.exam.CoreOptions.maven() stuff
    File outputFileDir = project.file( 'build/classes/java/test/META-INF/maven/' )
    File outputFile = new File( outputFileDir, 'dependencies.properties' )
    outputs.file outputFile

    doFirst {
        outputFileDir.mkdirs()
        Properties properties = new Properties();

        // first we add our GAV info
        properties.setProperty( "groupId", "${project.group}" );
        properties.setProperty( "artifactId", project.name );
        properties.setProperty( "version", "${project.version}" );
        properties.setProperty( "${project.group}/${project.name}/version", "${project.version}" );

        // then for all our deps
        project.configurations.testRuntime.resolvedConfiguration.resolvedArtifacts.each {
            final String keyBase = it.moduleVersion.id.group + '/' + it.moduleVersion.id.name;
            properties.setProperty( "${keyBase}/scope", "compile" )
            properties.setProperty( "${keyBase}/type", it.extension )
            properties.setProperty( "${keyBase}/version", it.moduleVersion.id.version )
        }

        FileOutputStream outputStream = new FileOutputStream( outputFile );
        try {
            properties.store( outputStream, "Generated from Gradle for PaxExam testing" )
        }
        finally {
            outputStream.close()
        }
    }
}

test.dependsOn(":metatype-builder-testbundle:copyIntegrationTestArtifacts")
test.dependsOn(":metatype-builder-lib:copyIntegrationTestArtifacts")
test.dependsOn 'generateDependsFile'
test.outputs.upToDateWhen { false }

copyIntegrationTestArtifacts.enabled=false
